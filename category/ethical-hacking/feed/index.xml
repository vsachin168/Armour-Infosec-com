<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Ethical Hacking Archives - Armour Infosec</title>
	<atom:link href="https://www.armourinfosec.com/category/ethical-hacking/feed/" rel="self" type="application/rss+xml" />
	<link>https://www.armourinfosec.com/category/ethical-hacking/</link>
	<description>Do Your Part - Be Security Smart</description>
	<lastBuildDate>Mon, 30 Mar 2020 08:07:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.3.1</generator>

<image>
	<url>https://www.armourinfosec.com/wp-content/uploads/2018/02/ai.png</url>
	<title>Ethical Hacking Archives - Armour Infosec</title>
	<link>https://www.armourinfosec.com/category/ethical-hacking/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Performing Rule Based Attack Using Hashcat</title>
		<link>https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/</link>
					<comments>https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Wed, 19 Feb 2020 08:25:22 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Penetration Testing]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=25539</guid>

					<description><![CDATA[<p>Performing Rule Based Attack Using Hashcat This post will focus on Performing Rule Based Attack Using Hashcat. It&#8217;s a way...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/">Performing Rule Based Attack Using Hashcat</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2>Performing Rule Based Attack Using Hashcat</h2>
<p><span class="st">This post will focus on Performing Rule Based Attack Using Hashcat. It&#8217;s a way of using a dictionary or multiple dictionaries of words in order to crack a password in Kali Linux.<br />
</span></p>
<h3 id="rule-based_attack" class="sectionedit1">Rule-based Attack</h3>
<p>Recently I was writing a blog on hashcat to cracking the hashes but the blog was going long so i thought about to write another blog to explain more about hashcat attacks,so that you can easily crack the has.So the rule-based attack is one of the most complicated of all the attack modes.The reason for this is very simple.the rule-based attack is like a <strong>programming language</strong> designed for password candidate generation. It has functions to modify,cut or extend words and has conditional operators to skip some, etc.That makes it the most flexible,accurate and efficient attack.</p>
<h3 id="why_not_stick_to_regular_expressions" class="sectionedit3">Why not stick to regular expressions</h3>
<p>Why re-invent the wheel? Simple answer: regular expressions are too slow. Typically we have to generate <strong>1.000.000.000</strong> (or more) fresh password candidates in less than <strong>10 ms</strong> before hashing algorithms start to become idle, and then again and again, second after second. Just take a look at your GPU speed display to get an idea of it.</p>
<h3 id="compatibility_to_other_rule_engines" class="sectionedit4">Compatibility to other rule engines</h3>
<p>The rule-engine in hashcat was written so that all functions that share the same letter-name are 100% compatible to <a class="urlextern" title="http://www.openwall.com/john" href="http://www.openwall.com/john" rel="nofollow">John the Ripper</a> and Passwordpro rules and vice versa. Later we started to introduce some of our own functions that are not compatible. But these functions got their own letter-names to avoid conflicts.</p>
<h3>What Are Rules and When Would I Use Them?</h3>
<p>The first thing which comes in our mind is, What are rules  why we should use rule attack to cracking the hash.So First of all, consider the following scenario. You have a basic password wordlist containing the words below:</p>
<pre class="">password
mysecret
qwerty</pre>
<p>If you wanted to try the above passwords with the pattern &#8220;123&#8221; added to the end, your list will become:</p>
<pre class="">password
password123
mysecret
mysecret123
qwerty
qwerty123</pre>
<p>If you also want to capitalise the first letter of the original words, it will now become:</p>
<pre class="">password
password123
Password
mysecret
mysecret123
Mysecret
qwerty
qwerty123
Qwerty</pre>
<p>Although you can type each new pattern manually for each word in your list,this will quickly get impractical with larger wordlists.</p>
<p>Thankfully,we can express these patterns in programming terms using rules. With rules,we can create new passwords through modification of existing passwords supplied.</p>
<p>Instead of having to write every new pattern for each password like above,we only require our original wordlist:</p>
<pre class="">password
mysecret
qwerty</pre>
<p>And a file containing the rules that express our patterns:</p>
<pre class="">$c
$1 $2 $3</pre>
<p>Though much smaller, the above would produce the same outcome of words as before. Not only is this quicker than manually creating each password you want to try, your dictionary file also won’t be as large.</p>
<p>In short, a rule-based attack allows you to express patterns which are applied to existing passwords to quickly generate new passwords to use.and crack the hashed fast and easily.</p>
<h2>Creating Rules</h2>
<p>Now that we can see the benefits of rules,we will now define some rules to use in our own rule-based attack. To define our own custom set of rules to use with hashcat, we need to store them in a file,like best64.rule or something you as want.</p>
<p>In this tutorial,we will cover some of the most commonly used rule functions:</p>
<table style="height: 360px;" width="614">
<thead>
<tr>
<td width="59"><strong>Name</strong></td>
<td width="51"><strong>Function</strong></td>
<td width="123"><strong>Description</strong></td>
<td width="49"><strong>Example Rule</strong></td>
<td width="75"><strong>Input Word</strong></td>
<td width="116"><strong>Output Word</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td width="59">Nothing</td>
<td width="51">:</td>
<td width="123">Do nothing</td>
<td width="49">:</td>
<td width="75">p@ssW0rd</td>
<td width="116">p@ssW0rd</td>
</tr>
<tr>
<td width="59">Lowercase</td>
<td width="51">l</td>
<td width="123">Lowercase all letters</td>
<td width="49">l</td>
<td width="75">p@ssW0rd</td>
<td width="116">p@ssw0rd</td>
</tr>
<tr>
<td width="59">Uppercase</td>
<td width="51">u</td>
<td width="123">Uppercase all letters</td>
<td width="49">u</td>
<td width="75">p@ssW0rd</td>
<td width="116">P@SSW0RD</td>
</tr>
<tr>
<td width="59">Capitalize</td>
<td width="51">c</td>
<td width="123">Capitalize the first letter and lower the rest</td>
<td width="49">c</td>
<td width="75">p@ssW0rd</td>
<td width="116">P@ssw0rd</td>
</tr>
<tr>
<td width="59">Append Character</td>
<td width="51">$X</td>
<td width="123">Append character X to end</td>
<td width="49">$1</td>
<td width="75">p@ssW0rd</td>
<td width="116">p@ssW0rd1</td>
</tr>
<tr>
<td width="59">Prepend Character</td>
<td width="51">^X</td>
<td width="123">Prepend character X to front</td>
<td width="49">^1</td>
<td width="75">p@ssW0rd</td>
<td width="116">1p@ssW0rd</td>
</tr>
<tr>
<td width="59">Replace</td>
<td width="51">sXY</td>
<td width="123">Replace all instances of X with Y</td>
<td width="49">ss$</td>
<td width="75">p@ssW0rd</td>
<td width="116">p@$$W0rd</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>Writing our rule-set:</h3>
<p>To start, we will create some rules to do basic manipulation of the characters.</p>
<p>From the above table, we will put in our rules file the lowercase, uppercase and capitalize functions:</p>
<pre class="">:
l
u
c</pre>
<p>The colon entry instructs hashcat to try the original word.We&#8217;ll be including this so we can compare how many passwords were cracked using unmodified passwords from the wordlist.</p>
<p>We’ll also append to the end of the passwords the characters one to nine individually:</p>
<pre class="">$1
$2
$3
$4
$5
$6
$7
$8
$9</pre>
<p>To express multiple functions in a single rule, you can separate them with a space like the following:</p>
<pre class="">$1 $2 $3 $4</pre>
<p>In this case we are appending characters one, two and three to the end of our passwords.(i.e. the password is root it will convert to root1234 ), And if you want to append multi combination (i.e. $5 $ 5 it will be root55)</p>
<p>You can substitute one character for another, by doing the following:</p>
<pre class="">sXY</pre>
<p>Where X is the character to replace and Y is the new character.</p>
<p>For this demonstration,we will substitute the following letters for their commonly used alternatives:</p>
<ul>
<li>“@”  instead of “a”</li>
<li>“3” instead of “e”</li>
<li>“1” instead of “l”</li>
<li>&#8220;0&#8221; instead of &#8220;o&#8221;</li>
</ul>
<p>To express these as rules in a hashcat file, it looks like:</p>
<pre class="">sa@
se3
sl1
sa@ se3 sl1
sa@ se3 ss&amp;</pre>
<p>The final rules we&#8217;ll add inserts the word &#8220;root&#8221; before and after the password:</p>
<pre class="">^R ^o ^o ^t
^r ^o ^o ^t
$r $o $o $t</pre>
<p>From the above, notice we&#8217;ve also included &#8220;Root&#8221; with a capital &#8220;R&#8221; before the password.</p>
<p>Now that we have covered the different rules we’re going to use, make sure you have created a file called “rules” that contains the following rules</p>
<pre class="">:
#Lowercase
l
#Uppercase
u
#Capitalise  first character
c
#Add '1' to the end
$1
#Add '2' to the end
$2
#Add '3' to the end
$3
#Add '4' to the end
$4
#Add '5' to the end
$5
#Add '6' to the end
$6
#Add '7' to the end
$7
#Add '8' to the end
$8
#Add '9' to the end
$9
#Add '123' to the end
$1 $2 $3
#Substitute 'a' for '@'
sa@
#Substitute 'e' for '3'
se3
#substitute 'l' for '1'
sl1
#Substitute 'a' for '@', 'e' for '3', 'l' for '1'
sa@ se3 sl1
#Add the word 'root' to the beginning
^R ^o ^o ^t
#Add the word 'root' to the beginning
^r ^o ^o ^t
#Add the word 'root' to the end
$r $o $o $t</pre>
<p>The lines beginning with a &#8220;#&#8221; are used to indicate to hashcat that the line is a comments.</p>
<h3>Running the Rule-Based Attack</h3>
<p>Now that we have our rules file and providing you have the Root hashes and rockyou password dictionary, we are ready to start cracking the password hashes.</p>
<p>In order to log the effectiveness of our rules, we’ll make use of hashcat&#8217;s debug commands. The debug option in hashcat works by logging a rule to a file every time it successfully cracks a password.</p>
<p>To run our rule-based attack, we will use the following command:</p>
<p>&nbsp;</p>
<pre class="theme:dark-terminal lang:default decode:true ">hashcat -a 0 -m 0 target_hash/mayhem.hash  /usr/share/wordlists/rockyou.txt -r rules --debug-mode=1 --debug-file=matched.rule --force
</pre>
<p><img decoding="async" class="alignnone wp-image-25540 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/sort-command-for-hash.png" alt="hashcat command for rule base cracking" width="672" height="35" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/sort-command-for-hash.png 672w, https://www.armourinfosec.com/wp-content/uploads/2020/02/sort-command-for-hash-300x16.png 300w" sizes="(max-width: 672px) 100vw, 672px" /></p>
<table style="height: 489px;" width="480">
<tbody>
<tr>
<td width="225"><strong>Argument</strong></td>
<td width="225"><strong>Meaning</strong></td>
</tr>
<tr>
<td width="225">-a 0</p>
<p>-m 0</td>
<td width="225">&nbsp;</p>
<p>The attack mode (Wordlist + Rule)</p>
<p>Identify the hash as MD5.</p>
<p>&nbsp;</td>
</tr>
<tr>
<td width="225">target_hash/mayhem.hash</td>
<td width="225">The hash file to use.</td>
</tr>
<tr>
<td width="225">/usr/share/wordlists/rockyou.txt</td>
<td width="225">The rockyou wordlist.</td>
</tr>
<tr>
<td width="225">-r rules</td>
<td width="225">Points hashcat to our rules file called “rules”.</td>
</tr>
<tr>
<td width="225">&#8211;debug-mode=1</td>
<td width="225">Writes the rule whenever it successfully cracks a password.</td>
</tr>
<tr>
<td width="225">&#8211;debug-file=matched.rule</p>
<p>&nbsp;</p>
<p>&#8211;force</td>
<td width="225">The name of the debug file where the matched rules are stored.Store every password when it cracked.</p>
<p>To  run hashcat forcefully</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>After following the steps above, when you run the command the output will look like..</p>
<figure id="attachment_25543" aria-describedby="caption-attachment-25543" style="width: 1344px" class="wp-caption aligncenter"><img decoding="async" fetchpriority="high" class="wp-image-25543 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack.png" alt="hashcat rule based attack" width="1344" height="702" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack.png 1344w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-300x157.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-1024x535.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-768x401.png 768w" sizes="(max-width: 1344px) 100vw, 1344px" /><figcaption id="caption-attachment-25543" class="wp-caption-text"><span style="color: #008000;">^This is the output just after execution of hashcat command.  <br /></span></figcaption></figure>
<p>&nbsp;</p>
<p><img decoding="async" class="wp-image-25542 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulecrackedpass.png" alt="Cracked passwords" width="552" height="701" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulecrackedpass.png 552w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulecrackedpass-236x300.png 236w" sizes="(max-width: 552px) 100vw, 552px" /></p>
<p>however we do not know how many passwords each rule cracked.To find this information, this is where our debug file comes in. If we look at its contents right now&#8230;</p>
<pre class="theme:dark-terminal lang:default decode:true">cat matched.rule
sort matched.rule | uniq –c</pre>
<p><img decoding="async" class="wp-image-25541 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/uniqematched.png" alt="mached rules " width="567" height="362" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/uniqematched.png 567w, https://www.armourinfosec.com/wp-content/uploads/2020/02/uniqematched-300x192.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></p>
<p><span style="color: #008000;">Matched rules in cracking<br />
</span>So i got the output of hashes,hope this will help you to resolve queries of cracking the hash with hashcat.As previously mentioned, only the commonly used rule functions were covered in this tutorial. To view a full list of available rule functions, you can do so on the hashcat website <a href="https://hashcat.net/wiki/doku.php?id=rule_based_attack#limitations" target="_blank" rel="noopener noreferrer">here</a>.Additionally recommend you to..</p>
<h3>Using Existing Rule Files</h3>
<p>It is worth mentioning that hashcat contains some rule files by default.These are located in the &#8220;rules&#8221; folder of your hashcat installation:</p>
<pre class="">ls -l /usr/share/hashcat/rules/</pre>
<h2>Summary</h2>
<p>In this guide, we created  and used our own custom rules in hashcat to perform a rule-based attack. We started by covering what rule-based attacks are and why they are used. We then proceeded to create our own rules and use the rockyou dictionary to crack MD5 hashes.</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/">Performing Rule Based Attack Using Hashcat</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Password Cracking with Hashcat</title>
		<link>https://www.armourinfosec.com/password-cracking-with-hashcat/</link>
					<comments>https://www.armourinfosec.com/password-cracking-with-hashcat/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Tue, 18 Feb 2020 11:27:30 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Penetration Testing]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=25505</guid>

					<description><![CDATA[<p>Password Cracking with Hashcat Hello Friends, Today I&#8217;m going to explain the Hashcat password Cracking Tool, As I learn from...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/password-cracking-with-hashcat/">Password Cracking with Hashcat</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h2><strong>Password Cracking with Hashcat</strong></h2>
<p class="hh gw dj ba az gx hi hj hk hl hm hn ho hp hq hr hs">Hello Friends, Today I&#8217;m going to explain the Hashcat password Cracking Tool, As I learn from my cybersecurity classes and reading some blogs doing practices and the help of infosec boy&#8217;s able to explain it, so obviously the credits goes to <strong><a href="https://armourinfosec.com/">Armour Infosec</a></strong>. Password cracking and user account exploitation is one of the most issues in cybersecurity field. Password Cracking tools, like Hashcat and John the Ripper, Provide the potential attackers to check billions of passwords per second against Victim&#8217;s password hashes. these tools have proved to be effective in cracking passwords, recent research shows that combining deep learning techniques with these tools can produce significantly better results. Specifically, using Generative Adversarial Networks (GANs), which comprises of two neural networks, to generate high-quality password guesses can improve the existing tools to match 51%-73% more passwords than just the tools alone. This significant improvement demonstrates that this new approach using deep learning can generate numerous new pass-words that were once beyond the reach of other tools.On one hand, this is an impressive result driven by researchers of deep learning and cybersecurity, and on the other, a strong warning to the community of the increasing dangers of weak password authentication.</p>
<p id="0250" class="hh gw dj ba az gx hi hj hk hl hm hn ho hp hq hr hs ">This blog is a reference guide for cracking, tool usage and supportive.tools that assist pentesters in password recovery (cracking). this will not be covering the installation of these tools but will include references to their proper installation, and if all else fails, Google. Updates and additions to this blog are planned yearly as advancements in cracking evolve.</p>
<p class="hh gw dj ba az gx hi hj hk hl hm hn ho hp hq hr hs ">“Password recovery is a battle against math, time, cost, and human behavior, and much like any battle, the tactics are constantly  evolving.”</p>
<h4><strong>Table of content</strong></h4>
<ol>
<li>Required Software</li>
<li>Core Hash Cracking Knowledge</li>
<li>Cracking Methodology</li>
<li>Basic Cracking</li>
<li>Dictionary / Wordlist</li>
<li>Rules &amp; Masks</li>
<li>Common Hash Examples</li>
<li>Appendix
<ol>
<li>Online Resources</li>
<li>Hashcat Menu</li>
<li>Hash Cracking Benchmarks</li>
<li>Hash Cracking Speed</li>
</ol>
</li>
</ol>
<h3>REQUIRED SOFTWARE</h3>
<p><span style="color: #000000;">In order to follow many of the techniques in this manual, you will need to install the following software on your UNIX host. This book does not cover how to install said software and assumes you were able to follow the included links and extensive support websites.</span></p>
<p><strong>HASHCAT v5.1.0 (or newer)</strong><br />
<a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></p>
<p><strong>JOHN THE RIPPER 1.9.0-jumbo-1 (or newer)</strong><br />
<a href="https://www.openwall.com/john/" target="_blank" rel="noopener noreferrer">https://www.openwall.com/john/</a></p>
<p><strong>Hashcat-utils v1.9 (or newer)</strong><br />
<a href="https://hashcat.net/wiki/doku.php?id=hashcat_utils">https://hashcat.net/wiki/doku.php?id=hashcat_utils</a></p>
<h5><span style="color: #000000;">Additionally you will need dictionaries/wordlists and highly recommend the below sources:</span></h5>
<p><strong>WEAKPASS DICTIONARY</strong><br />
<a href="https://weakpass.com/wordlist">https://weakpass.com/wordlist</a></p>
<p><strong>CRACKSTATION DICTIONARY</strong><br />
<a href="https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm">https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm</a></p>
<p><strong>SKULL SECURITY WORDLISTS</strong><br />
<a href="https://wiki.skullsecurity.org/index.php?title=Passwords">https://wiki.skullsecurity.org/index.php?title=Passwords</a></p>
<p><strong>Throughout the manual, generic names have been given to the various inputs required in a cracking</strong><br />
<strong>commands structure. Legend description is below:</strong></p>
<h5><strong>COMMAND STRUCTURE LEGEND</strong><br />
<span style="color: #000000;"><strong>hashcat</strong> = Generic representation of the various Hashcat binary names (hashcat tool)</span><br />
<span style="color: #000000;"><strong>john</strong> = Generic representation of the John the Ripper binary names (John tool)</span><br />
<span style="color: #000000;"><strong>#type</strong> = Hash type; which is an abbreviation in John or a number in Hashcat (hash MD5,MD4..)</span><br />
<span style="color: #000000;"><strong>hash.txt</strong> = File containing target hashes to be cracked (Raw hash list )</span><br />
<span style="color: #000000;"><strong>dict.txt</strong> = File containing dictionary/wordlist (password list)</span><br />
<span style="color: #000000;"><strong>rule.txt</strong> = File containing permutation rules to alter dict.txt input</span><br />
<span style="color: #000000;"><strong>passwords.txt</strong> = File containing cracked password results</span><br />
<span style="color: #000000;"><strong>outfile.txt</strong> = File containing results of some functions output</span></h5>
<p><strong>Lastly, as a good reference for testing various hash types to place into your “hash.txt” file, the below</strong><br />
<strong>sites contain all the various hashing algorithms and example output tailored for each cracking tool:</strong></p>
<p><strong>HASHCAT HASH FORMAT EXAMPLES</strong><br />
<a href="https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</a></p>
<p><strong>JOHN THE RIPPER HASH FORMAT EXAMPLES</strong><br />
<a href="http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats">http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats</a><br />
http://openwall.info/wiki/john/sample-hashes</p>
<h3><span style="color: #800000;">CORE HASH CRACKING KNOWLEDGE-:</span></h3>
<p><strong>ENCODING vs HASHING vs ENCRYPTING</strong><br />
Encoding = transforms data into a publicly known scheme for usability<br />
Hashing = one-way cryptographic function nearly impossible to reverse<br />
Encrypting = mapping of input data and output data reversible with a key</p>
<p><strong>CPU vs GPU</strong><br />
CPU = 2–72 cores mainly optimized for sequential serial processing<br />
GPU = 1000’s of cores with 1000’s of threads for parallel processing</p>
<p><strong>CRACKING TIME = KEYSPACE / HASHRATE</strong><br />
Keyspace: charset^length (?a?a?a?a = 95⁴ = 81,450,625)<br />
Hashrate: hashing function / hardware power (bcrypt / GTX1080 = 13094 H/s)<br />
Cracking Time: 81,450,625 / 13094 H/s = 6,220 seconds<br />
*Keyspace displayed and Hashrate vary by tool and hardware used.<br />
SALT = random data that’s used as additional input to a one-way function<br />
ITERATIONS = the number of times an algorithm is run over a given hash</p>
<h3>HASH IDENTIFICATION</h3>
<blockquote><p>“there isn’t a foolproof method for identifying which hash function was used by simply looking at the hash, but there are reliable clues (i.e. $6$ sha512crypt).The best method is to know from where the hash was extracted and identify the hash function for that software”</p></blockquote>
<p><strong>DICTIONARY/WORDLIST ATTACK</strong> = straight attack uses a precompiled list of words, phrases,<br />
and common/unique strings and Might be genrated according to the Information gathered to attempt to match a password.</p>
<p><strong>BRUTE-FORCE ATTACK</strong> = attempts every possible combination of a given character set, usually up<br />
to a certain length.(work like the probability mathod to make combinations)</p>
<p><strong>RULE ATTACK</strong> = generates permutations against a given wordlist by modifying, trimming,<br />
extending, expanding, combining, or skipping words.</p>
<p><strong>MASK ATTACK</strong> = a form of targeted brute-force attack by using placeholders for characters in certain<br />
positions (<strong>i.e</strong>. <strong>?a?a?a?l?d?d</strong>).</p>
<p><strong>HYBRID ATTACK</strong> = combines a Dictionary and Mask Attack by taking input from the dictionary and<br />
adding mask placeholders (<strong>i.e. dict.txt ?d?d?d)</strong>.CRACKING RIG = from a basic laptop to a 64 GPU cluster, this is the hardware/ platform<br />
on which you perform your password hash attacks.</p>
<p><strong>EXPECTED RESULTS</strong><br />
Know your cracking rig’s capabilities by performing benchmark testing and don’t assume you can<br />
achieve the same results posted by forum members without using the exact same dictionary, attack plan,<br />
or hardware setup.Cracking success largely depends on your ability to use resources efficiently and<br />
make calculated trade-offs based on the target hash.</p>
<p><strong>DICTIONARY/WORDLIST vs BRUTE-FORCE vs ANALYSIS</strong><br />
Dictionaries and brute-force are not the end all be all to crack hashes.They are merely the beginning and end of an attack plan.I’ll say True mastery is everything in the middle,where analysis and information gathering of passwords,patterns, behaviors, and policiesaffords the ability to recover that last 20%. Experiment with your attacks and research and compile targeted wordlists with your new knowledge.Do not rely heavily on dictionaries because they can only help you with what is “known” and not the unknown.In realworld Analysis of target and gather information to make your own dictionary/wordlist is best way to attack and get credentials of the target easier and faster.</p>
<p><strong>CRACKING METHODOLOGY</strong><br />
Following is basic cracking methodology broken into steps,but the process is subject to change based on current/future target information uncovered during the cracking process.</p>
<p><strong>1 &#8211; EXTRACT HASHES</strong><br />
Pull hashes from target,Victim Machine,identify hashing function, and properly format output for your tool of choice.</p>
<p><strong>2 &#8211; FORMAT HASHES</strong><br />
Format your hashes based on your tool’s preferred method.See tool documentation for this guidance.<br />
Hashcat,for example,on each line takes &lt;user&gt;:&lt;hash&gt; OR just the plain &lt;hash&gt;.</p>
<p><strong>3 &#8211; EVALUATE HASH STRENGTH</strong><br />
Using the Appendix table “Hash Cracking Speed (Slow-Fast)” assess your target hash and it’s cracking<br />
speed.If it’s a slow hash,you will need to be more selective at what types of dictionaries and attacks<br />
you perform.If it’s a fast hash,you can be more liberal with your attack strategy.</p>
<p><strong>4 &#8211; CALCULATE CRACKING RIG CAPABILITIES</strong><br />
With the information from evaluating the hash strength,baseline your cracking rig’s capabilities.<br />
Perform benchmark testing using John The Ripper and/or Hashcat’s built-in benchmark ability on your<br />
rig,it’s totally depends on your hardware.for example have a look..!</p>
<p><strong>Hash Crackers/Bit Coin Miners</strong></p>
<p><img decoding="async" class="wp-image-25518 alignright" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmining-300x187.png" alt="" width="366" height="228" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmining-300x187.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmining.png 500w" sizes="(max-width: 366px) 100vw, 366px" /></p>
<p>&nbsp;</p>
<p><strong>Fast Hash One</strong><br />
• 1.536TH/s – Cost 3-5,000 dollars.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img decoding="async" class="size-medium wp-image-25519 alignleft" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmmgpu-300x225.png" alt="" width="300" height="225" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmmgpu-300x225.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmmgpu-768x576.png 768w, https://www.armourinfosec.com/wp-content/uploads/2020/02/bitmmgpu.png 800w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p><strong>25 GPU Hash Cracker</strong><br />
• An eight character NTLM password<br />
cracked in 5.5 hours. 14 character LM<br />
hash cracked in six minutes.350 billion<br />
hashes per second.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>To know about your System capability,use these command to get the result.</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat --benchmark --force
hashcat -b -m 0 --force
</pre>
<p><img decoding="async" class="alignnone wp-image-25530 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcat-benchmark-e1582021834282.png" alt="hashcat bench mark" width="671" height="610" /></p>
<figure id="attachment_25529" aria-describedby="caption-attachment-25529" style="width: 672px" class="wp-caption alignleft"><img decoding="async" class="wp-image-25529 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/Screenshot-from-2020-02-18-15-35-11.png" alt="This is the speed of cracking MD5 Hash" width="672" height="442" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/Screenshot-from-2020-02-18-15-35-11.png 672w, https://www.armourinfosec.com/wp-content/uploads/2020/02/Screenshot-from-2020-02-18-15-35-11-300x197.png 300w" sizes="(max-width: 672px) 100vw, 672px" /><figcaption id="caption-attachment-25529" class="wp-caption-text"><span style="color: #333399;">Hashcat speed of cracking MD5 Hash</span></figcaption></figure>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Based on these results you will be able to better assess your attack options by knowing your rigs capabilities against a specific hash. This will be a more accurate result of a hash’s cracking speed based on your rig.It will be useful to save these results for future reference.</p>
<p id="f98d" class="ht hu dj ba hv b ed ik ef il hy im ia in ic io ie db" data-selectable-paragraph=""><strong class="hv if">5 &#8211; FORMULATE PLAN</strong><br />
Based on known or unknown knowledge begin creating an attack plan.Included on the next page is a<br />
“Basic Cracking” to get you started.</p>
<p id="20b0" class="ht hu dj ba hv b ed ik ef il hy im ia in ic io ie db" data-selectable-paragraph=""><strong class="hv if">6 &#8211; ANALYZE PASSWORDS</strong><br />
After successfully cracking a sufficient amount of hashes analyze the results for any clues or patterns.<br />
This analysis may aid in your success on any remaining hashes.</p>
<p id="2aca" class="ht hu dj ba hv b ed ik ef il hy im ia in ic io ie db" data-selectable-paragraph=""><strong class="hv if">7 &#8211; CUSTOM ATTACKS</strong><br />
Based on your password analysis create custom attacks leveraging those known clues or patterns.<br />
Examples would be custom mask attacks or rules to fit target users’ behavior or preferences.just by doing some social engineering and footprinting or depends on your knowldge.</p>
<p id="b3c4" class="ht hu dj ba hv b ed ik ef il hy im ia in ic io ie db" data-selectable-paragraph=""><strong class="hv if">8 &#8211; ADVANCED ATTACKS</strong><br />
Experiment with Princeprocessor, custom Markov-chains, maskprocessor, or custom dictionary attacks<br />
to shake out those remaining stubborn hashes. This is where your expertise and creativity really come<br />
into play.</p>
<p id="644f" class="ht hu dj ba hv b ed ik ef il hy im ia in ic io ie db" data-selectable-paragraph=""><strong class="hv if">9 &#8211; REPEAT</strong><br />
Go back to STEP 4 and continue the process over again, tweaking dictionaries, mask, parameters, and<br />
methods.gather some more information about,You’re in the grind at this point and need to rely on skill and luck.</p>
<h3 id="f8f2" class="gv gw dj ba az gx dl gy dn gz ha hb hc hd he hf hg"><strong>Basic-cracking</strong></h3>
<p>This is only meant as a basic guide to processing hashes and each scenario will obviously be unique<br />
based on external circumstances.For this attack plan we will assume we know the password hashes are<br />
raw MD5 and assume we have already captured some plain text passwords of users.If we had no<br />
knowledge of plain text passwords we would most likely skip to DICTIONARY/WORDLIST attacks.<br />
Lastly,since MD5 is a “Fast” hash we can be more liberal with our attack plan.</p>
<p><strong>1 &#8211; CUSTOM WORDLIST</strong><br />
First compile your known plain text passwords into a custom wordlist file.Pass this to your tool of<br />
choice as a straight dictionary attack.</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt
hashcat -a 0 -m 0 -w 4 hash.txt pass.txt --force</pre>
<p>This will work only for MD5 hash where:-</p>
<p>-a 0 designates a dictionary attack<br />
-m 0 designates the type of hash we are cracking (MD5)<br />
-w 4 workload profile<br />
-o cracked.txt is the output file for the cracked passwords.<br />
hash.txt is our input file of hashes.<br />
custom_list.txt is the wordlist file for this dictionary attack.</p>
<p><img decoding="async" class="alignnone wp-image-25538 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcat-o-cracked-.txt.png" alt="Hashcat approach of cracking" width="675" height="651" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcat-o-cracked-.txt.png 675w, https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcat-o-cracked-.txt-300x289.png 300w" sizes="(max-width: 675px) 100vw, 675px" /></p>
<p>After cracking the output file will show you the passwords of cracked hashes like down below&#8230;</p>
<p><img decoding="async" class="alignleft wp-image-25537 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/cracked-hash.png" alt="" width="670" height="85" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/cracked-hash.png 670w, https://www.armourinfosec.com/wp-content/uploads/2020/02/cracked-hash-300x38.png 300w" sizes="(max-width: 670px) 100vw, 670px" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong class="hv if">2 &#8211; CUSTOM WORDLIST + RULES</strong><br />
Run your custom wordlist with permutation rules to crack slight variations.Rules will help you to get password sooner as you have the information about victim hash.follow this link to know more about rule based attack.after all this is rockyou.txt not custom wordlist you can use according to your victim.</p>
<p><a href="https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/">https://www.armourinfosec.com/performing-rule-based-attack-using-hashcat/</a></p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 0 -m 0 target_hash/mayhem.hash  /usr/share/wordlists/rockyou.txt -r rules --debug-mode=1 --debug-file=matched.rule --force</pre>
<p><img decoding="async" class="alignnone wp-image-25543 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack.png" alt="hashcat rule based attack" width="1344" height="702" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack.png 1344w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-300x157.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-1024x535.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/rulebasedattack-768x401.png 768w" sizes="(max-width: 1344px) 100vw, 1344px" /></p>
<p><strong class="hv if">3 &#8211; DICTIONARY/WORDLIST</strong><br />
Perform a broad dictionary attack, looking for common passwords and leaked passwords in well known<br />
dictionaries/wordlists.I&#8217;m using best64.rule of hashcat and rockyou.txt to crack.</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 0 -m 0 target_hash/mayhem.hash /usr/share/wordlists/rockyou.txt -r best64.rule --debug-mode=1 --debug-file=matched.rule --force</pre>
<p><img decoding="async" class="alignnone wp-image-25552 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/wordlistrule.png" alt="hashcat wordlist+rull" width="1366" height="672" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/wordlistrule.png 1366w, https://www.armourinfosec.com/wp-content/uploads/2020/02/wordlistrule-300x148.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/wordlistrule-1024x504.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/wordlistrule-768x378.png 768w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p><strong class="hv if">4 &#8211; DICTIONARY/WORDLIST + RULES</strong><br />
Add rule permutations to the broad dictionary attack, looking for subtle changes to common words/phrases and leaked passwords.</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 0 -m 0 -w 4 target_hash/mayhem.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --debug-mode=1 --debug-file=matched.rule --force
</pre>
<p><strong class="hv if"><img decoding="async" class="alignnone wp-image-25556 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/dictwordrule.png" alt="hashcat Dictonary+wordlist+rule" width="1356" height="684" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/dictwordrule.png 1356w, https://www.armourinfosec.com/wp-content/uploads/2020/02/dictwordrule-300x151.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/dictwordrule-1024x517.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/dictwordrule-768x387.png 768w" sizes="(max-width: 1356px) 100vw, 1356px" /></strong></p>
<p>for the output open matched.rule to which rules are worked.</p>
<p><strong class="hv if">5 &#8211; CUSTOM WORDLIST + RULES</strong><br />
Add any newly discovered passwords to your custom wordlist and run an attack again with permutation<br />
rules, looking any other variations,just by hitting the echo or awk to append the new rule.and then use the above command.<br />
:: awk -F “:” ‘{print $2}’ hashcat.potfile &gt;&gt; custom_list.txt</p>
<p><strong class="hv if">6 &#8211; MASK</strong><br />
Now we will use mask attacks included with Hashcat to search the keyspace for common password<br />
lengths and patterns, based on the RockYou dataset.there&#8217;s many pattern of passwords inside the rockyou-1-6-.hcmask like our rule based attack.go to the link to find all paths of hashcat <a href="https://centos.pkgs.org/6/forensics-i386/hashcat-3.00-1.el6.i686.rpm.html">https://centos.pkgs.org/6/forensics-i386/hashcat-3.00-1.el6.i686.rpm.html </a>Already stored masks of hashcat.(note: attack mode will be change -a 0 to -a 3)</p>
<p><img decoding="async" class="alignnone wp-image-25559 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcatmasks.png" alt="hashcat masklists" width="635" height="120" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcatmasks.png 635w, https://www.armourinfosec.com/wp-content/uploads/2020/02/hashcatmasks-300x57.png 300w" sizes="(max-width: 635px) 100vw, 635px" /></p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 3 -m 0 -w 4 target_hash/mayhem.hash  /usr/share/hashcat/masks/rockyou-1-60.hcmask --force
</pre>
<p>&nbsp;</p>
<p><img decoding="async" class="alignnone wp-image-25560 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/maskattacka3.png" alt="hashcat mask attack" width="1355" height="664" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/maskattacka3.png 1355w, https://www.armourinfosec.com/wp-content/uploads/2020/02/maskattacka3-300x147.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/maskattacka3-1024x502.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/maskattacka3-768x376.png 768w" sizes="(max-width: 1355px) 100vw, 1355px" /></p>
<p><img decoding="async" class="alignnone wp-image-25561 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/opmaskattacka3.png" alt="hashcat output mask attack" width="619" height="677" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/opmaskattacka3.png 619w, https://www.armourinfosec.com/wp-content/uploads/2020/02/opmaskattacka3-274x300.png 274w" sizes="(max-width: 619px) 100vw, 619px" /></p>
<p>The list of all recovered passwords of given hashes.</p>
<p>&nbsp;</p>
<p><strong class="hv if">7 &#8211; HYBRID DICTIONARY + MASK</strong><br />
Using a dictionary of your choice, conduct hybrid attacks looking for larger variations of common words or known passwords by appending/prepending masks to those candidates.now i think you&#8217;re able to run the commands according to needs.can&#8217;t show you all the output screen shots.there&#8217;s lots more i have to cover in this blog so lets move on to the next..</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 7 -m 0 -w 4 hash.txt rockyou-1–60.hcmask dict.txt
hashcat -a 6 -m 0 -w 4 hash.txt dict.txt rockyou-1-60.hcmask</pre>
<p><strong>8 &#8211; CUSTOM WORDLIST + RULES</strong><br />
Add any newly discovered passwords back to your custom wordlist and run an attack again with<br />
permutation rules looking any other subtle variations.</p>
<pre class="theme:dark-terminal lang:default decode:true ">awk -F “:” ‘{print $2}’ hashcat.potfile &gt;&gt; custom_list.txt
hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt -r dive.rule --loopback</pre>
<p><strong>9 &#8211; COMBO</strong><br />
Using a dictionary of your choice, perform a combo attack by individually combining the dictionary’s<br />
password candidates together to form new candidates.just mean combinig to dictionary&#8217;s to crack the hash.</p>
<pre class="theme:dark-terminal lang:default decode:true">hashcat -a 1 -m 0 -w 4 hash.txt dict.txt dict.txt</pre>
<p><strong>10 &#8211; CUSTOM HYBRID ATTACK</strong><br />
Add any newly discovered passwords back to your custom wordlist and perform a hybrid attack against<br />
those new acquired passwords.</p>
<pre class="theme:dark-terminal lang:default decode:true ">awk -F “:” ‘{print $2}’ hashcat.potfile &gt;&gt; custom_list.txt
hashcat -a 6 -m 0 -w 4 hash. txt custom_list.txt rockyou-1-60.hcmask
hashcat -a 7 -m 0 -w 4 hash. txt rockyou-1-60.hcmask custom_list.txt</pre>
<p><strong>11 &#8211; CUSTOM MASK ATTACK</strong><br />
By now the easier, weaker passwords may have fallen to cracking, but still some remain.Using PACK<br />
create custom mask attacks based on your currently cracked passwords. Be sure to sort out</p>
<pre class="theme:dark-terminal lang:default decode:true ">masks that match the previous rockyou-1-60.hcmask list.
hashcat -a 3 -m 0 -w 4 hash.txt custom_masks.hcmask</pre>
<p><strong>12 &#8211; BRUTE-FORCE</strong><br />
When all else fails begin a standard brute-force attack, being selective as to how large a keyspace your<br />
rig can adequately brute-force. Above 8 characters this is typically pointless due to hardware limitations<br />
and password entropy/ complexity.This particular mask will attempt to bruteforce an 8 character password.</p>
<p>Hashcat has the following charsets built-in:</p>
<pre class="">?l = abcdefghijklmnopqrstuvwxyz (lowercase)
?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ(uppercase)
?d = 0123456789(digits)  
?h = 0123456789abcdef(digit+lowercase)
?H = 0123456789ABCDEF(d+u)
?s = «space»!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~  (special char)
?a = ?l?u?d?s (all alpha + lwrc + digit + special char)

</pre>
<pre class="theme:dark-terminal lang:default decode:true ">hashcat -a 3 -m 0 -w 4 target_hash/mayhem.hash -i ?a?a?a?a?a?a?a?a --force</pre>
<p><img decoding="async" class="alignnone wp-image-25562 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/broutattack.png" alt="hashcat brout force attack" width="1354" height="677" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/broutattack.png 1354w, https://www.armourinfosec.com/wp-content/uploads/2020/02/broutattack-300x150.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/broutattack-1024x512.png 1024w, https://www.armourinfosec.com/wp-content/uploads/2020/02/broutattack-768x384.png 768w" sizes="(max-width: 1354px) 100vw, 1354px" /></p>
<p><img decoding="async" class="alignnone wp-image-25563 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/broutfoutput.png" alt="hashcat brout force output" width="707" height="677" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/broutfoutput.png 707w, https://www.armourinfosec.com/wp-content/uploads/2020/02/broutfoutput-300x287.png 300w" sizes="(max-width: 707px) 100vw, 707px" /></p>
<h4><strong>ONLINE PASSWORD ANALYSIS RESOURCES</strong></h4>
<p><strong>WEAKPASS</strong><br />
Analyzes public password dumps and provides efficient dictionaries for download.<br />
<a href="http://weakpass.com/">http://weakpass.com/</a><br />
<strong>PASSWORD RESEARCH</strong><br />
Important password security and authentication research papers in one place.<br />
<a href="http://www.passwordresearch.com/">http://www.passwordresearch.com/</a><br />
<strong>THE PASSWORD PROJECT</strong><br />
Compiled analysis of larger password dumps using PIPAL and PASSPAL tools.<br />
<a href="http://www.thepasswordproject.com/leaked_password_lists_and_dictionaries">http://www.thepasswordproject.com/leaked_password_lists_and_dictionaries</a></p>
<h4><strong>DICTIONARY / WORDLIST</strong></h4>
<p><strong>DOWNLOAD RESOURCES</strong></p>
<p><strong>WEAKPASS</strong><br />
<a href="http://weakpass.com/wordlist">http://weakpass.com/wordlist</a><br />
<strong>CRACKSTATION DICTIONARY</strong><br />
<a href="https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm">https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm</a><br />
<strong>HAVE I BEEN PWNED</strong><br />
*You’ll have to crack the SHA1’s<br />
<a href="https://haveibeenpwned.com/passwords">https://haveibeenpwned.com/passwords</a><br />
<strong>SKULL SECURITY WORDLISTS</strong><br />
<a href="https://wiki.skullsecurity.org/index.php?title=Passwords">https://wiki.skullsecurity.org/index.php?title=Passwords</a><br />
<strong>CAPSOP</strong><br />
<a href="https://wordlists.capsop.com/">https://wordlists.capsop.com/</a><br />
<strong>UNIX-NINJA DNA DICTIONARY</strong><br />
*Dictionary link at bottom of article*<br />
<a href="https://www.unix-ninja.com/p/Password_DNA">https://www.unix-ninja.com/p/Password_DNA</a><br />
<strong>PROBABLE-WORDLIST</strong><br />
<a href="https://github.com/berzerk0/Probable-Wordlists">https://github.com/berzerk0/Probable-Wordlists</a><br />
<strong>EFF-WORDLIST</strong><br />
Long-list (7,776 words) &amp; Short-list (1,296 words)<br />
<a href="https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt">https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt</a><br />
<a href="https://www.eff.org/files/2016/09/08/eff_short_wordlist_1.txt">https://www.eff.org/files/2016/09/08/eff_short_wordlist_1.txt</a><br />
<strong>RAINBOW TABLES</strong><br />
*Rainbow Tables are for the most part obsolete but provided here for reference*<br />
<a href="http://project-rainbowcrack.com/table.htm">http://project-rainbowcrack.com/table.htm</a></p>
<h4><strong>TARGETED WORDLISTS</strong></h4>
<p><strong>CeWL</strong><br />
Custom wordlist generator scrapes &amp; compiles keywords from websites.<br />
<a href="https://digi.ninja/projects/cewl.php">https://digi.ninja/projects/cewl.php</a><br />
Example scan depth of 2 and minimum word length of 5 output to wordlist.txt</p>
<pre class="theme:dark-terminal lang:default decode:true">cewl -d 2 -m 5 -w wordlist.txt http://&lt;target/ website&gt;</pre>
<p><strong><img decoding="async" class="alignnone wp-image-25574 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/Cewlwgen.png" alt="Cewl password genrator" width="764" height="424" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/Cewlwgen.png 764w, https://www.armourinfosec.com/wp-content/uploads/2020/02/Cewlwgen-300x166.png 300w, https://www.armourinfosec.com/wp-content/uploads/2020/02/Cewlwgen-672x372.png 672w" sizes="(max-width: 764px) 100vw, 764px" /></strong></p>
<p><strong>SMEEGESCRAPE</strong><br />
Text file and website scraper which generates custom wordlists from content.<br />
<a href="http://www.smeegesec.com/2014/01/smeegescrape-text-scraper-and-custom.html">http://www.smeegesec.com/2014/01/smeegescrape-text-scraper-and-custom.html</a><br />
Compile unique keywords from text file and output into wordlist.</p>
<pre class="theme:dark-terminal lang:default decode:true">SmeegeScrape.py -f file.txt -o wordlist.txt</pre>
<p>Scrape keywords from target website and output into wordlist.</p>
<pre class="theme:dark-terminal lang:default decode:true">SmeegeScrape.py -u http://&lt;target/ website&gt; -si -o wordlist.txt</pre>
<p><strong>GENERATE PASSWORD HASHES</strong></p>
<p><strong>HASHCAT</strong><br />
<a href="https://github.com/hashcat/hashcat/tree/master/tools">https://github.com/hashcat/hashcat/tree/master/tools</a></p>
<pre class="theme:dark-terminal lang:default decode:true ">test.pl passthrough &lt;#type&gt; &lt;#&gt; dict.txt</pre>
<p><strong>MDXFIND</strong><br />
https://hashes.org/mdxfind.php</p>
<pre class="theme:dark-terminal lang:default decode:true ">echo | mdxfind -z -h ‘&lt;#type&gt;’ dict.txt</pre>
<p><strong>LYRICPASS (Song Lyrics Password Generator)</strong></p>
<pre class="theme:dark-terminal lang:default decode:true "> python3 lyricpass.py -a "eminem"
</pre>
<p><img decoding="async" class="alignnone wp-image-25576 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2020/02/Eminemdict.png" alt="lyrics password cracking" width="507" height="69" srcset="https://www.armourinfosec.com/wp-content/uploads/2020/02/Eminemdict.png 507w, https://www.armourinfosec.com/wp-content/uploads/2020/02/Eminemdict-300x41.png 300w" sizes="(max-width: 507px) 100vw, 507px" /></p>
<h4><strong>ONLINE HASH CRACKING SERVICES</strong></h4>
<p><strong>GPUHASH</strong><br />
<a href="https://gpuhash.me/">https://gpuhash.me/</a><br />
<strong>CRACKSTATION</strong><br />
<a href="https://crackstation.net/">https://crackstation.net/</a><br />
<strong>ONLINE HASH CRACK</strong><br />
<a href="https://www.onlinehashcrack.com/">https://www.onlinehashcrack.com/</a><br />
<strong>HASH HUNTERS</strong><br />
<a href="http://www.hashhunters.net/">http://www.hashhunters.net/</a></p>
<p><span style="color: #993300;"><strong>COMMON HASH EXAMPLES</strong></span></p>
<pre class="lang:default decode:true ">MD5, NTLM, NTLMv2, LM, MD5crypt, SHA1, SHA256, bcrypt, PDF 1.4 - 1.6 (Acrobat 5-8),
Microsoft OFFICE 2013, RAR3-HP, Winzip, 7zip, Bitcoin/Litecoin, MAC OSX v10.5-v10.6,
MySQL 4.1-5+, Postgres, MSSQL(2012)-MSSQL(2014), Oracle 11g, Cisco TYPE 4 5 8 9, WPA
PSK / WPA2 PSK</pre>
<p><strong>MDS (</strong>HASHCAT)</p>
<p>HASH FORMAT<br />
8743b52063cd84097a65dl633f5c74f5</p>
<p><strong>BRUTE FORCE ATTACK</strong></p>
<pre class="theme:dark-terminal lang:default decode:true ">hashcat -m 0 -a 3 hash.txt ?a?a?a?a?a?a</pre>
<p><strong>WORDLIST ATTACK</strong></p>
<pre class="theme:dark-terminal lang:default decode:true ">hashcat -m 0 -a 0 hash.txt dict.txt</pre>
<p><strong>WORDLIST + RULE ATTACK</strong></p>
<pre class="theme:dark-terminal lang:default decode:true ">hashcat -m 0 -a 0 hash.txt dict.txt -r rule.txt</pre>
<p><strong>NTLM (PWDUMP)</strong></p>
<p><strong>HASH FORMAT</strong><br />
b4b9b02e6f09a9bd760f388b67351e2b<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 1000 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 1000 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 1000 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>LM</strong></p>
<p><strong>HASH FORMAT</strong><br />
$LM$a9c604d244c4e99d<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 3000 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 3000 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 3000 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>MD5CRYPT</strong></p>
<p><strong>HASH FORMAT</strong><br />
$1$28772684$iEwNOgGugq09.bIz5sk8k/<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 500 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 500 -a 0 hash.txt dict.txtWORDLIST + RULE ATTACK<br />
hashcat -m 500 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>SHA1</strong></p>
<p><strong>HASH FORMAT</strong><br />
b89eaac7e61417341b710b727768294d0e6a277b<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 100 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 100 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 100 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>SHA256</strong></p>
<p><strong>HASH FORMAT</strong><br />
127e6fbfe24a750e72930c220a8el38275656b8e5d8f48a98c3c92df2caba935<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 1400 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 1400 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 1400 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>BCRYPT</strong></p>
<p><strong>HASH FORMAT</strong><br />
$2a$05$LhayLxezLhKlLhWvKxCyLOj0jlu.Kj0jZ0pEmml34uzrQlFvQDLF6</p>
<p><strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 3200 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 3200 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 3200 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>PDF 1.4 &#8211; 1.6 (ACROBAT 5-8)</strong></p>
<p><strong>HASH FORMAT</strong><br />
$pdf$2*3*128*-1028*l*16*da42eel5d4b3e08fe5b9ecea0e02ad0f*32*c9b59d72c7c670c42eeb<br />
4fcald2cal5000000000000000000000000000000000*32*c4ff3e868dc87604626c2b8c259297al<br />
4d58c6309c70b00afdfblfbbal0ee571<br />
<strong>EXTRACT HASH</strong><br />
pdf2hashcat.py example.pdf &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 10500 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 10500 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 10500 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>MICROSOFT OFFICE 2013</strong></p>
<p><strong>HASH FORMAT</strong><br />
example.docx:$office$*2013*100000*256*16*7dd611d7eb4c899f74816dldec817b3b*948dc0<br />
b2c2c6c32fl4b5995a543ad037*0b7ee0e48e935f937192a59de48a7d561ef2691d5c8a3ba87ec2d<br />
04402a94895<br />
<strong>EXTRACT HASH</strong><br />
office2hashcat.py example.docx &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 9600 -a 3 &#8211;username hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 9600 -a 0 &#8211;username hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 9600 -a 0 &#8211;username hash.txt dict.txt -r rule.txt</p>
<p><strong>RAR3-HP (ENCRYPTED HEADER)</strong></p>
<p><strong>HASH FORMAT</strong><br />
$RAR3$*0*45109af8ab5f297a*adbf6c5385d7a40373e8f77d7b89d317<br />
#!Ensure to remove extraneous rar2john output to match above hash!#<br />
<strong>EXTRACT HASH</strong><br />
rar2john.py example.rar &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 12500 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 12500 -a 0 hash.txt dict.txtWORDLIST + RULE ATTACK<br />
hashcat -m 12500 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>WINZIP</strong></p>
<p><strong>HASH FORMAT</strong><br />
$zip2$*0*3*0*b5d2b7bf57ad5e86a55c400509c672bd*d218*0**ca3d736d03a34165cfa9*$/ zip2$<br />
#!Ensure to remove extraneous zip2john output to match above hash!#<br />
<strong>EXTRACT HASH</strong><br />
zip2john.py example.zip &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 13600 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 13600 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 13600 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>7-ZIP</strong></p>
<p><strong>HASH FORMAT</strong><br />
$7z$0$19$0$salt$8$f6196259a7326e3f0000000000000000$185065650$112$98$f3bc2a88062c<br />
419a25acd40c0c2d75421cf23263f69c51bl3f9blaada41a8a09f9adeae45d67c60b56aad338f20c<br />
0dcc5eb811c7a61128ee0746f922cdb9c59096869f341c7a9cblac7bb7d771f546b82cf4e6flla5e<br />
Cd4b61751e4d8de66dd6e2dfb5b7dl022d2211e2d66eal703f96<br />
#!Ensure to remove extraneous 7zip2john output to match above hash!#<br />
<strong>EXTRACT HASH</strong><br />
7z2john.py example.7z &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 11600 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 11600 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 11600 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>BITCOIN / LITECOIN</strong></p>
<p><strong>HASH FORMAT</strong><br />
$bitcoin$96$d011alb6a8d675b7a36d0cd2efaca32a9f8dcld57d6d01a58399ea04e703e8bbb448<br />
99039326f7a00fl71a7bbc854a54$16$1563277210780230$158555$96$628835426818227243334<br />
570448571536352510740823233055715845322741625407685873076027233865346542174$66$6<br />
25882875480513751851333441623702852811440775888122046360561760525<br />
<strong>EXTRACT HASH</strong><br />
bitcoin2john.py wallet.dat &gt; hash.txt<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 11300 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 11300 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 11300 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>MAC OS X 10.8-10.12</strong></p>
<p><strong>HASH FORMAT</strong><br />
username:$ml$35714$50973de90d336b5258f01e48ab324aa9ac81ca7959ac470d3d9c4395af624<br />
398$631a0ef84081b37cfe594a5468cf3a63173cd2ec25047b89457ed300f2b41b30a0792a39912f<br />
C5f3f7be8f74b7269ee3713172642de96ee482432a8dl2bf291a<br />
<strong>EXTRACT HASH</strong><br />
sudo plist2hashcat.py /var/db/dslocal/nodes/Default/users/&lt;username&gt;.plist<br />
BRUTE FORCE ATTACKhashcat -m 122 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 122 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 122 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>MYSQL4.1 / MYSQL5+ (DOUBLE SHA1)</strong></p>
<p><strong>HASH FORMAT</strong><br />
FCF7C1B8749CF99D88E5F34271D636178FB5D130<br />
<strong>EXTRACT HASH</strong><br />
SELECT user,password FROM mysql.user INTO OUTFILE ‘/tmp/hash.txt’;<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 300 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 300 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 300 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>POSTGRESQL</strong></p>
<p><strong>HASH FORMAT</strong><br />
a6343a68d964ca596d9752250d54bb8a:postgres<br />
<strong>EXTRACT HASH</strong><br />
SELECT username, passwd FROM pg_shadow;<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 12 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 12 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 12 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>MSSQL(2012), MSSQL(2014)</strong></p>
<p><strong>HASH FORMAT</strong><br />
0x02000102030434ealbl7802fd95ea6316bd61d2c94622ca3812793e8fbl672487b5c904a45a31b<br />
2ab4a78890d563d2fcf5663e46fe797d71550494be50cf4915d3f4d55ec375<br />
<strong>EXTRACT HASH</strong><br />
SELECT SL.name,SL.password_hash FROM sys.sql_logins AS SL;<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 1731 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 1731 -a 0 hash.txt dict.txt</p>
<p><strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 1731 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>ORACLE 11G</strong></p>
<p><strong>HASH FORMAT</strong><br />
ac5fle62d21fd0529428b84d42e8955b04966703:38445748184477378130<br />
<strong>EXTRACT HASH</strong><br />
SELECT SL.name,SL.password_hash FROM sys.sql_logins AS SL;<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 112 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 112 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 112 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>CISCO TYPE 4 (SHA256)</strong></p>
<p><strong>HASH FORMAT</strong><br />
2btjjy78REtmYkkW0csHUbDZOstRXoWdX1mGrmmfeHI<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 5700 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 5700 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 5700 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>CISCO TYPE 5 (MD5)</strong></p>
<p><strong>HASH FORMAT</strong><br />
$l$28772684$iEwN0gGugq09.bIz5sk8k/<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 500 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 500 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 500 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>CISCO TYPE 9 (SCRYPT)</strong></p>
<p><strong>HASH FORMAT</strong><br />
$9$2MJBozw/9R3UsU$21FhcKvpghcyw8deP25G0fyZaagyU0GBymkryv0dfo6<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 9300 -a 3 hash.txt ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 9300 -a 0 hash.txt dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -m 9300 -a 0 hash.txt dict.txt -r rule.txt</p>
<p><strong>WPA PSK / WPA2 PSK</strong></p>
<p><strong>HASH FORMAT</strong><br />
*Capture 4-way authentication handshake &gt; capture.cap<br />
cap2hccapx.bin capture.cap capture_out.hccapx<br />
<strong>BRUTE FORCE ATTACK</strong><br />
hashcat -m 2500 -a 3 capture_out.hccapx ?a?a?a?a?a?a<br />
<strong>WORDLIST ATTACK</strong><br />
hashcat -m 2500 -a 3 capture_out.hccapx dict.txt<br />
<strong>WORDLIST + RULE ATTACK</strong><br />
hashcat -a 0 capture_out.hccapx dict.txt -r rule.txt</p>
<p><span style="color: #800000;"><strong>ONLINE RESOURCES</strong></span></p>
<p>HASHCAT<br />
<a href="https://hashcat.net/wiki/">https://hashcat.net/wiki/</a><br />
<a href="https://hashcat.net/wiki/doku.php?id=hashcat_utilshttps://hashcat.net/wiki/doku.php?id=statsprocessor">https://hashcat.net/wiki/doku.php?id=hashcat_utilshttps://hashcat.net/wiki/doku.php?id=statsprocessor</a><br />
<a href="http://www.netmux.com/blog/ultimate-guide-to-cracking-foreign-character-passwords-using-has">http://www.netmux.com/blog/ultimate-guide-to-cracking-foreign-character-passwords-using-has</a><br />
<a href="http://www.netmux.com/blog/cracking-12-character-above-passwords">http://www.netmux.com/blog/cracking-12-character-above-passwords</a></p>
<p><strong>CRACKING RIGS</strong><br />
<a href="http://www.netmux.com/blog/how-to-build-a-password-cracking-rig">http://www.netmux.com/blog/how-to-build-a-password-cracking-rig</a><br />
<a href="https://www.unix-ninja.com/p/Building_a_Password_Cracking_Rig_for_Hashcat_-_Part_III">https://www.unix-ninja.com/p/Building_a_Password_Cracking_Rig_for_Hashcat_-_Part_III</a></p>
<p><strong>EXAMPLE HASH GENERATION</strong><br />
<a href="https://www.onlinehashcrack.com/hash-generator.php">https://www.onlinehashcrack.com/hash-generator.php</a><br />
<a href="https://www.tobtu.com/tools.php">https://www.tobtu.com/tools.php</a><br />
<a href="http://hash.online-convert.com/">http://hash.online-convert.com/</a><br />
<a href="https://www.tools4noobs.com/online_tools/hash/">https://www.tools4noobs.com/online_tools/hash/</a><br />
<a href="https://quickhash.com/">https://quickhash.com/</a><br />
<a href="http://bitcoinvalued.com/tools.php">http://bitcoinvalued.com/tools.php</a><br />
<a href="http://www.sha1-online.com/">http://www.sha1-online.com/</a><br />
<a href="http://www.freeformatter.com/hmac-generator.html">http://www.freeformatter.com/hmac-generator.html</a><br />
<a href="http://openwall.info/wiki/john/Generating-test-hashes">http://openwall.info/wiki/john/Generating-test-hashes</a></p>
<p>OTHER<br />
<a href="http://blog.thireus.com/cracking-story-how-i-cracked-over-122-million-sha1-and-md5-hashed-">http://blog.thireus.com/cracking-story-how-i-cracked-over-122-million-sha1-and-md5-hashed-</a><br />
passwords/<br />
<a href="http://www.utf8-chartable.de/">http://www.utf8-chartable.de/</a><br />
<a href="http://thesprawl.org/projects/pack/">http://thesprawl.org/projects/pack/</a><br />
<a href="https://blog.gotmilk.com/2011/06/dictionaries-wordlists/">https://blog.gotmilk.com/2011/06/dictionaries-wordlists/</a><br />
<a href="http://wpengine.com/unmasked/">http://wpengine.com/unmasked/</a></p>
<p><strong>NETMUX</strong><br />
<a href="http://www.netmux.com/">http://www.netmux.com/</a><br />
<a href="http://www.hashcrack.io/">http://www.hashcrack.io/</a><br />
<a href="https://github.com/netmux">https://github.com/netmux</a><br />
<a href="https://twitter.com/netmux">https://twitter.com/netmux</a><br />
<a href="https://www.instagram.com/netmux/">https://www.instagram.com/netmux/</a></p>
<p>If you&#8217;re reading this last line a huge thank&#8217;s and i&#8217;m gonna cover John the ripper to the nest blog it will contain all the screen shots of the all cracking methodology with commands and everything which left in hashcat.hope you learn something new,Thank you.</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/password-cracking-with-hashcat/">Password Cracking with Hashcat</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/password-cracking-with-hashcat/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Nmap Cheat Sheet</title>
		<link>https://www.armourinfosec.com/nmap-cheat-sheet/</link>
					<comments>https://www.armourinfosec.com/nmap-cheat-sheet/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Sat, 25 Nov 2017 14:41:24 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Information Gathering]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Penetration Testing]]></category>
		<category><![CDATA[information gathering]]></category>
		<category><![CDATA[nmap]]></category>
		<category><![CDATA[penetration testing]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=25088</guid>

					<description><![CDATA[<p>Network Mapper (Nmap) also known as the God of Port Scanners used for network discovery and the basis for most...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/nmap-cheat-sheet/">Nmap Cheat Sheet</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><strong>Network Mapper (Nmap)</strong> also known as the <strong>God of Port Scanners</strong> used for network discovery and the basis for most security enumeration during the initial stages of a <a href="https://www.armourinfosec.com/category/penetration-testing/">Penetration Testing</a>. Nmap has a multitude of options and when you first start playing with this excellent tool it can be a bit daunting. In this cheat sheet you will find a series of practical example commands for running Nmap and getting the most of this powerful tool. Below is Nmap Cheat Sheet and Helpful Tips and Techniques.</p>
<p>Keep in mind that this cheat sheet merely touches the surface of the available options. The <a href="http://nmap.org/docs.html">Nmap Documentation portal</a> is your reference for digging deeper into the options available.</p>
<h4><strong>Nmap in a nutshell</strong></h4>
<ul>
<li>Target Specification</li>
<li>Host Discovery</li>
<li>Port Specification</li>
<li>Service Discovery / Version Detection</li>
<li>Operating System Version Detection</li>
<li>Firewall / IDS Evasion and Spoofing</li>
<li>Time and Performance based Scan</li>
<li>Output of Scan</li>
<li>Vulnerability / Exploit Detection, using Nmap Scripts (NSE)</li>
</ul>
<h5><strong>Target Specification</strong></h5>
<p>Scan a single IP</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1</pre>
<p>Scan specific IPs</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 192.168.1.5</pre>
<p>Scan a Range</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1-254</pre>
<p>Scan a Domain / Host</p>
<pre class="theme:familiar lang:sh decode:true ">nmap nmap scanme.nmap.org</pre>
<p>Scan Targets from a File</p>
<pre class="theme:familiar lang:sh decode:true ">namp -iL targets.txt</pre>
<p>Exclude the Listed Host from the Target Range</p>
<pre class="theme:familiar lang:sh decode:true ">nmap --exclude 192.168.1.5 192.168.1.1-10</pre>
<h5><strong>Host Discovery</strong></h5>
<p>To List given targets only, no Scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -sL 192.168.1.1-3</pre>
<p>To Disable Port Scanning, Host Discovery only</p>
<pre class="theme:familiar lang:sh decode:true">nmap -sn 192.168.1.1/24</pre>
<p>To Disable Host Discovery. Port scan only</p>
<pre class="theme:familiar lang:sh decode:true">nmap -Pn 192.168.1.1-5</pre>
<p>TCP SYN discovery on given port</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -PS 80,21 192.168.1.1</pre>
<p>TCP ACK discovery on given port</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -PA 80,21 192.168.1.1</pre>
<p>UDP discovery on given port</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -PU 53 192.168.1.1</pre>
<h5><strong>Port Specification</strong></h5>
<p>Scan a given Port (i.e 21 here)</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -p 21 192.168.1.1</pre>
<p>Scan the given Port Range</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -p 21-100 192.168.1.1</pre>
<p>Scan the multiple TCP and UDP ports</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -p U:53,T:21-25,80 192.168.1.1</pre>
<p>Scan all 65535 ports</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -p- 192.168.1.1</pre>
<p>Scans the given Service Name</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -p http,https 192.168.1.1</pre>
<p>Scans the Top 100 ports</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -F 192.168.1.1</pre>
<h5><strong>Service Discovery / Version Detection</strong></h5>
<p>Detect Version of the Running Services</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -sV 192.168.1.1</pre>
<p>To set intensity range between 0 to 9. Higher number increases possibility of correctness</p>
<pre class="theme:familiar lang:sh decode:true">nmap -sV --version-intensity 5 192.168.1.1</pre>
<p>To enable the light mode(intensity =2). It is faster but have less possibility of correctness</p>
<pre class="theme:familiar lang:sh decode:true ">nmap  -sV --version-light 192.168.1.1</pre>
<p>To enables the intense mode(intensity =9). It is slower but have more possibility of correctness</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -sV --version-all 192.168.1.1</pre>
<h5><strong>Operating System Version Detection</strong></h5>
<p>Detect the Operating system</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -sV 192.168.1.1</pre>
<p>Aggressive mode i.e OS, Service Version, Trace route.</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -A 192.168.1.1</pre>
<h5><strong>Firewall / IDS Evasion and Spoofing</strong></h5>
<p>Use tiny fragmented IP packets. Its harder for packet filters</p>
<pre class="theme:familiar lang:default decode:true">nmap -f 192.168.1.1</pre>
<p>Used to set our own offset size</p>
<pre class="theme:familiar lang:sh decode:true ">nmap --mtu 32 192.168.1.1</pre>
<p>Use the Spoofed IP to scan</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -D decoy-ip1,decoy-ip2, your-own-ip remote-host-ip</pre>
<p>Scans target.com from example.com (Domain Name Spoofing)</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -S example.com target.com</pre>
<p>Uses the given port as a source</p>
<pre class="theme:familiar lang:sh decode:true">nmap -g 53 192.168.1.1</pre>
<p>Appends random data to sent packets</p>
<pre class="theme:familiar lang:sh decode:true ">nmap --data-length 200 192.168.1.1</pre>
<h5><strong>Time and Performance based Scan</strong></h5>
<p>Slow scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -T0 192.168.1.1</pre>
<p>Sneaky scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -T1 192.168.1.1</pre>
<p>Timely scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -T2 192.168.1.1</pre>
<p>Default scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -T3 192.168.1.1</pre>
<p>Aggressive scan</p>
<pre class="theme:familiar lang:sh decode:true">nmap -T4 192.168.1.1</pre>
<p>Very Aggressive scan</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -T5 192.168.1.1</pre>
<h5><strong>Output of Scan</strong></h5>
<p>To scan in the Verbose mode (-vv for greater effect)</p>
<pre class="theme:familiar lang:sh decode:true ">nmap -v 192.168.1.1</pre>
<p>Save the scan results to the scan.file</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -oN scan.file</pre>
<p>Save the results in xml.file</p>
<pre class="theme:familiar lang:sh decode:true">nmap 192.168.1.1 -oX xml.file</pre>
<p>Save the results in grep.file</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -oG grep.file</pre>
<p>Saves the Output in the three major formats at once</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -oA result</pre>
<p>To scan in the debug mode (-dd for greater effect)</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -d</pre>
<p>To see all the packets sent and received</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -T4 --packet-trace</pre>
<h5><strong>Vulnerability / Exploit Detection, using Nmap Scripts (NSE)</strong></h5>
<p>Scan with default NSE Scripts</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 -sC</pre>
<p>Scan with given NSE Script ( Example: nmap.nse )</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 --script=nmap.nse</pre>
<p>Use script with arguments</p>
<pre class="theme:familiar lang:sh decode:true ">nmap 192.168.1.1 –script=nmap.nse --script-args user=admin</pre>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/nmap-cheat-sheet/">Nmap Cheat Sheet</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/nmap-cheat-sheet/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Best Firefox Addons for Hacking</title>
		<link>https://www.armourinfosec.com/best-firefox-addons-for-hacking/</link>
					<comments>https://www.armourinfosec.com/best-firefox-addons-for-hacking/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Tue, 13 Oct 2015 06:16:02 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Information Gathering]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=913</guid>

					<description><![CDATA[<p>Firefox add-ons are useful for penetration testers and security analysts. These penetration testing add-ons helps in performing different kinds of...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/best-firefox-addons-for-hacking/">Best Firefox Addons for Hacking</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p style="text-align: justify;"><a href="https://www.armourinfosec.com/ethical-hacking/best-firefox-addons-for-hacking"><img decoding="async" class="wp-image-916 size-full alignright" src="https://www.armourinfosec.com/wp-content/uploads/2015/10/firefox.jpg" alt="firefox" width="450" height="241" srcset="https://www.armourinfosec.com/wp-content/uploads/2015/10/firefox.jpg 450w, https://www.armourinfosec.com/wp-content/uploads/2015/10/firefox-300x161.jpg 300w" sizes="(max-width: 450px) 100vw, 450px" /></a>Firefox add-ons are useful for penetration testers and security analysts. These penetration testing add-ons helps in performing different kinds of attacks, and modify request headers direct from the browser. This way, it reduces the use of a separate tool for most of the penetration testing related tasks.<span id="more-913"></span></p>
<h5><span style="color: #000000;"><strong>Stop Tracking ( Disconnect )</strong></span></h5>
<p>Stop tracking with “Disconnect”<br />
&#8211; open source and<br />
&#8211; loads pages 44% faster.<br />
&#8211; save upto 39% of bandwidth<br />
&#8211; stops tracking more than 2,000+ third-party sites<br />
&#8211; keeps your searches private<br />
&#8211; was named the best privacy tool by the New York Times (2016),</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/disconnect/">https://addons.mozilla.org/en-US/firefox/addon/disconnect/</a></p>
<h5><span style="color: #000000;"><strong>Cookie Quick Manager</strong></span></h5>
<p>This add-on helps you perform various operations on cookies like viewing, searching, creating, and even editing them.<br />
<a href="https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/">https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/</a></p>
<h5><span style="color: #000000;"><strong>HackBar Quantum</strong></span></h5>
<p>Unlike the previous version of Hackbar, this one is compatible with firefox quantum also. This tool helps in testing sql injections, XSS holes and site security.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=recommended">https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=recommended</a></p>
<h5><span style="color: #000000;"><strong>HTTPS Everywhere</strong></span></h5>
<p>Encrypt the web! With this tool as your add-on, you can apply HTTPS ecryption automatically on all the sites even on those where https: prefix is omitted.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/">https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/</a></p>
<h5><span style="color: #000000;"><strong>Greasemonkey</strong></span></h5>
<p>Allows you to customize the way a web page displays or behaves, by using small bits of JavaScript.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/" target="_blank" rel="noopener noreferrer">https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/</a></p>
<h5><span style="color: #000000;"><strong>Injector</strong></span></h5>
<p>Its a lightweight web app bug finder. With the provision of custom injection lists, one can intercept and replay web requests.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/injector/">https://addons.mozilla.org/en-US/firefox/addon/injector/</a></p>
<h5><span style="color: #000000;"><strong>User-Agent Switcher and Manager</strong></span></h5>
<p>This is among the coolest ones. You can spoof your user-agent so that it becomes impossible for websites to know specific details about our browser , thus protecting your identity and it also unlocks other utilities like some websites can be made to load much faster if you spoof your user-agent with a mobile device.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/">https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/</a></p>
<h5><span style="color: #000000;"><strong>Easy XSS</strong></span></h5>
<p>Its a simple to use plugin. It provides you with a menu of various xss payloads. With just one click it gets copied to clipboard and now all we have to do is to paste it in the desired input tag.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/easy-xss/">https://addons.mozilla.org/en-US/firefox/addon/easy-xss/</a></p>
<h5><span style="color: #000000;"><strong>Wappalyzer</strong></span></h5>
<p>While doing web app pentesting, its necessary to know the technologies and the software used in building the app and of course the version also. With wappalyzer, it can all be done with single click.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/">https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/</a></p>
<h5><span style="color: #000000;"><strong>BuiltWith</strong></span></h5>
<p>Its used in finding the technologies used behind a Web application. If Wappalyzer, misses something out, it can be verified with Buildwith.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/builtwith/">https://addons.mozilla.org/en-US/firefox/addon/builtwith/</a></p>
<h5><span style="color: #000000;"><strong>Web developer</strong></span></h5>
<p>It provides an interface to inspect the HTML, CSS , script code for the web page. You can also edit the code and it will display the current output.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/?src=search">https://addons.mozilla.org/en-US/firefox/addon/web-developer/?src=search</a></p>
<h5><span style="color: #000000;"><strong>Tor browser</strong></span></h5>
<p>Thats the first thing which pops up in mind when we are talking about online privacy,anonymity and encryption. It’s a modified version of Firefox and it comes with pre-installed privacy add-ons, encryption and an advanced proxy.</p>
<p><a href="https://www.torproject.org/">https://www.torproject.org/</a></p>
<h5><span style="color: #000000;"><strong>Tamper Data for FF Quantum</strong></span></h5>
<p>&#8211; Monitor live requests<br />
&#8211; Edit headers on live requests<br />
&#8211; Cancel live requests<br />
&#8211; Redirect live requests</p>
<p>Usage: Click the blue cloud in the toolbar to start tampering. When you&#8217;re done, click it again to stop.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/tamper-data-for-ff-quantum/">https://addons.mozilla.org/en-US/firefox/addon/tamper-data-for-ff-quantum/</a></p>
<h5><span style="color: #000000;"><strong>uBlock Origin</strong></span></h5>
<p>An efficient blocker which at the same time is soft on CPU and memory. It can load and enforce thousands more filters than other popular blockers out there.<br />
Usage: The big power button in the popup is to permanently disable/enable uBlock for the current web site. It applies to the current web site only, it is not a global power button.</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/">https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/</a></p>
<h5><span style="color: #000000;"><strong>NoScript Security Suite</strong></span></h5>
<p><span style="color: #000000;">This tool allows potentially malicious web content to run only from sites trusted by you. This tool also protects you from attacks like XSS and other web exploits. Its more of defensive rather than offensive tool, still worth trying.</span></p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/noscript/">https://addons.mozilla.org/en-US/firefox/addon/noscript/</a></p>
<h5><span style="color: #000000;"><strong>anonymoX</strong></span></h5>
<p>AnonymoX is an initiative for anonymization on the internet. The aim is to restore the users right of anonymity in the web. Most websites monitor the behaviour of their users, giving the websites hosts the ability to analyze the general users behaviour and create detailed user profiles, which are frequently sold to third parties.</p>
<p>A threat for freedom of speech on the internet manifests in the repression through federal or private organizations. More and more governments censor websites with the excuse of child safety, copyright infringement or the fight against terrorism and thereby limit the freedom of speech.</p>
<p>Easy anonymous web browsing.</p>
<p>– Change your IP-Address and country</p>
<p>– Visit blocked or censored websites.</p>
<p>– Delete cookies, show your public ip, and more</p>
<p><a href="https://addons.mozilla.org/En-us/firefox/addon/anonymox/?src=collection&amp;collection_id=0ec8ac59-73ee-422b-9828-1002ac75369f" target="_blank" rel="noopener noreferrer">https://addons.mozilla.org/En-us/firefox/addon/anonymox/?src=collection&amp;collection_id=0ec8ac59-73ee-422b-9828-1002ac75369f</a></p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/best-firefox-addons-for-hacking/">Best Firefox Addons for Hacking</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/best-firefox-addons-for-hacking/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Best free hacking tools</title>
		<link>https://www.armourinfosec.com/best-free-hacking-tools/</link>
					<comments>https://www.armourinfosec.com/best-free-hacking-tools/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Mon, 28 Sep 2015 10:00:13 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=745</guid>

					<description><![CDATA[<p>John the Ripper John the Ripper is a fast password cracker, currently available for many flavors of Unix, Windows, DOS,...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/best-free-hacking-tools/">Best free hacking tools</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p style="text-align: justify;"><strong><a href="https://www.armourinfosec.com/ethical-hacking/best-free-hacking-tools/"><img decoding="async" class="alignright wp-image-801 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2015/09/hacking-tools.png" alt="hacking tools" width="450" height="300" srcset="https://www.armourinfosec.com/wp-content/uploads/2015/09/hacking-tools.png 450w, https://www.armourinfosec.com/wp-content/uploads/2015/09/hacking-tools-300x200.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></a>John the Ripper</strong></p>
<p style="text-align: justify;">John the Ripper is a fast password cracker, currently available for many flavors of Unix, Windows, DOS, BeOS, and OpenVMS. Its primary purpose is to detect weak Unix passwords. Besides several crypt(3) password hash types most commonly found on various Unix systems, supported out of the box are Windows LM hashes, plus lots of other hashes and ciphers in the community-enhanced version. John the Ripper homepage.<span id="more-745"></span></p>
<p style="text-align: justify;"><strong>THC Hydra</strong></p>
<p style="text-align: justify;">When you need to brute force crack a remote authentication service, Hydra is often the tool of choice. It can perform rapid dictionary attacks against more than 50 protocols, including telnet, ftp, http, https, smb, several databases, and much more.</p>
<p style="text-align: justify;"><strong> Hping</strong></p>
<p style="text-align: justify;">hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn&#8217;t only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.</p>
<p style="text-align: justify;"><strong> Nmap</strong></p>
<p style="text-align: justify;">Nmap (&#8220;Network Mapper&#8221;) is a free and open source utility for network discovery and security auditing. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.</p>
<p style="text-align: justify;"><strong>Ncat</strong></p>
<p style="text-align: justify;">Ncat is a feature-packed networking utility which reads and writes data across networks from the command line. Ncat was written for the Nmap Project and is the culmination of the currently splintered family of Netcat incarnations. It is designed to be a reliable back-end tool to instantly provide network connectivity to other applications and users. Ncat will not only work with IPv4 and IPv6 but provides the user with a virtually limitless number of potential uses.</p>
<p style="text-align: justify;"><strong>Wireshark</strong></p>
<p style="text-align: justify;">Wireshark is the world&#8217;s foremost network protocol analyzer. It lets you see what&#8217;s happening on your network at a microscopic level. It is the de facto (and often de jure) standard across many industries and educational institutions.</p>
<p style="text-align: justify;"><strong>ettercap</strong></p>
<p style="text-align: justify;">Ettercap is a comprehensive suite for man in the middle attacks. It features sniffing of live connections, content filtering on the fly and many other interesting tricks. It supports active and passive dissection of many protocols and includes many features for network and host analysis.</p>
<p style="text-align: justify;"><strong>Nikto2</strong></p>
<p style="text-align: justify;">Nikto is an Open Source (GPL) web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/programs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers. It also checks for server configuration items such as the presence of multiple index files, HTTP server options, and will attempt to identify installed web servers and software. Scan items and plugins are frequently updated and can be automatically updated.</p>
<p style="text-align: justify;"><strong>Kismet</strong></p>
<p style="text-align: justify;">Kismet is an 802.11 layer2 wireless network detector, sniffer, and intrusion detection system. Kismet will work with any wireless card which supports raw monitoring (rfmon) mode, and (with appropriate hardware) can sniff 802.11b, 802.11a, 802.11g, and 802.11n traffic. Kismet also supports plugins which allow sniffing other media such as DECT.</p>
<p style="text-align: justify;"><strong>w3af</strong></p>
<p style="text-align: justify;">w3af is a <strong>Web Application Attack and Audit Framework</strong>. The project’s goal is to create a framework to help you secure your web applications by finding and exploiting all web application vulnerabilities.</p>
<p style="text-align: justify;"><strong>Burp Suite</strong></p>
<p style="text-align: justify;">Burp Suite is an integrated platform for performing security testing of web applications. Its various tools work seamlessly together to support the entire testing process, from initial mapping and analysis of an application&#8217;s attack surface, through to finding and exploiting security vulnerabilities.</p>
<p style="text-align: justify;"><strong>Sqlmap</strong></p>
<p style="text-align: justify;">sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers. It comes with a powerful detection engine, many niche features for the ultimate penetration tester and a broad range of switches lasting from database fingerprinting, over data fetching from the database, to accessing the underlying file system and executing commands on the operating system via out-of-band connections.</p>
<p style="text-align: justify;"><strong>WebScarab</strong></p>
<p style="text-align: justify;">WebScarab is a framework for analysing applications that communicate using the HTTP and HTTPS protocols. It is written in Java, and is thus portable to many platforms. WebScarab has several modes of operation, implemented by a number of plugins. In its most common usage, WebScarab operates as an intercepting proxy, allowing the operator to review and modify requests created by the browser before they are sent to the server, and to review and modify responses returned from the server before they are received by the browser. WebScarab is able to intercept both HTTP and HTTPS communication. The operator can also review the conversations (requests and responses) that have passed through WebScarab.</p>
<p style="text-align: justify;"><strong>Metasploit</strong></p>
<p style="text-align: justify;">Metasploit simplifies network discovery and vulnerability verification for specific exploits, increasing the effectiveness of vulnerability scanners. This helps prioritize remediation and eliminate false positives, providing true security risk intelligence.</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/best-free-hacking-tools/">Best free hacking tools</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/best-free-hacking-tools/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Online Information Gathering Tools</title>
		<link>https://www.armourinfosec.com/online-information-gathering-tools/</link>
					<comments>https://www.armourinfosec.com/online-information-gathering-tools/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Mon, 14 Sep 2015 19:20:55 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Information Gathering]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=690</guid>

					<description><![CDATA[<p>A collection of uncomplicated, powerful network tools. http://www.yougetsignal.com/ This tool performs a reverse IP domain check which takes the domain...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/online-information-gathering-tools/">Online Information Gathering Tools</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><a href="https://www.armourinfosec.com/ethical-hacking/online-information-gathering-tools/"><img decoding="async" class="alignleft size-full wp-image-805" src="https://www.armourinfosec.com/wp-content/uploads/2015/09/Online-Information-Gathering.png" alt="Online Information Gathering" width="450" height="300" srcset="https://www.armourinfosec.com/wp-content/uploads/2015/09/Online-Information-Gathering.png 450w, https://www.armourinfosec.com/wp-content/uploads/2015/09/Online-Information-Gathering-300x200.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></a>A collection of uncomplicated, powerful network tools. <a href="http://www.yougetsignal.com/" target="_blank">http://www.yougetsignal.com/<br />
</a>This tool performs a reverse IP domain check which takes the domain name or IP address of a web server and searches for other sites known to be hosted on that same web server. Data is gathered from search engine results, which is not guaranteed to be complete. Knowing the other web sites hosted on a web server is important from both an SEO and web filtering perspective, particularly for those on shared web hosting plans.<span id="more-690"></span></p>
<p><a href="http://www.yougetsignal.com/tools/web-sites-on-web-server" target="_blank">http://www.yougetsignal.com/tools/web-sites-on-web-server</a></p>
<p>The port forwarding tester is a utility used to identify your external IP address and detect open ports on your connection. This tool is useful for finding out if your port forwarding is setup correctly or if your server applications are being blocked by a firewall</p>
<p><a href="http://www.yougetsignal.com/tools/open-ports" target="_blank">http://www.yougetsignal.com/tools/open-ports</a></p>
<p>The reverse e-mail lookup allows you to quickly find where an e-mail originated from.</p>
<p><a href="http://www.yougetsignal.com/tools/reverse-email-lookup" target="_blank">http://www.yougetsignal.com/tools/reverse-email-lookup</a></p>
<p>This tool performs a WHOIS lookup on a remote address. A WHOIS lookup can help determine the owner of a domain name or an IP address on the Internet.</p>
<p><a href="http://www.yougetsignal.com/tools/whois-lookup" target="_blank">http://www.yougetsignal.com/tools/whois-lookup</a></p>
<p>The complete free set of network troubleshooting domain testing tools that just work.</p>
<p><strong>DNS Tools</strong>:- DNS Lookup, DNS Traversal, DNS Tracer (DNS Traceroute), DNS Blacklist Check (arbl), DNS Recon, Reverse DNS Lookup / Scan, DNS Server Fingerprint.</p>
<p><strong>Network / Internet Tools</strong>:- Port Scan (nmap), Trace Route, Tracepath, NetBIOS Scan/Check, Wake On Lan, CIDR/Netmask Calculator, NTP Server Test, MX Records Retriever</p>
<p><strong>Web / HTTP Tools</strong>:- SSL Certificate Info, HTTP Header Retrieval, Plain Text WEB/URL Browser, HTTPRecon (HTTP Fingerprinting), Meta Tags Retriever, URL Encode / Decode, RAW URL Encode / Decode, Base64 Encode / Decode</p>
<p><strong>Database Lookups</strong>:- RFC Lookup, MAC Address Lookup, Default Password Lookup, Abuse Contact Lookup, IP/Host Locater, WhoIS Lookup</p>
<p><strong>Ping Tools</strong>:- Ping, PathPing, TCPing, Ping-Row</p>
<p><a href="https://w3dt.net/" target="_blank">https://w3dt.net/</a></p>
<p>intoDNS checks the health and configuration of DNS and mail servers.</p>
<p><a href="http://www.intodns.com/" target="_blank">http://www.intodns.com/</a></p>
<p>Web technology information profiler tool. Find out what a website is built with.</p>
<p><a href="http://builtwith.com/" target="_blank">http://builtwith.com/</a></p>
<p>Domain information, whois &amp; dns report</p>
<p><a href="http://www.domaincrawler.com/" target="_blank">http://www.domaincrawler.com/</a></p>
<p>Research domain ownership with Whois Lookup: Get ownership info, IP address history, rank, traffic, SEO &amp; more. Find available domains &amp; domains for sale.</p>
<p><a href="http://www.domaintools.com/" target="_blank">http://www.domaintools.com/</a></p>
<p>Find information on any domain name or website. Large database of whois information, DNS, domain names, name servers, IPs, and tools for searching and monitoring domain names</p>
<p><a href="http://www.who.is/" target="_blank">http://www.who.is/</a></p>
<p>Secure Domain Name Searches, Registration &amp; Availability. Use Our Free Whois Lookup Database to Search for &amp; Reserve</p>
<p><a href="https://www.whois.net/" target="_blank">https://www.whois.net/</a></p>
<p>online tools for the daily administration of networks.</p>
<p><a href="http://en.dnstools.ch/" target="_blank">http://en.dnstools.ch/</a></p>
<p>Free online network tools, including traceroute, nslookup, dig, whois, ping, and our own Domain Dossier and Email Dossier. Works with IPv6. Some source code included.</p>
<p><a href="http://centralops.net/co" target="_blank">http://centralops.net/co</a></p>
<p>DNS tools, Network tools, Email tools, DNS reporting and IP information gathering. Explore monitoring products and free DNS tools at DNSstuff.</p>
<p><a href="http://www.dnsstuff.com/" target="_blank">http://www.dnsstuff.com/</a></p>
<p>Research domain ownership with Whois Lookup: Get ownership info, IP address history, rank, traffic, SEO &amp; more. Find available domains &amp; domains for sale.</p>
<p><a href="http://whois.domaintools.com/" target="_blank">http://whois.domaintools.com/</a></p>
<p>View IP information</p>
<p><a href="https://geoiptool.com/" target="_blank">https://geoiptool.com/</a></p>
<p>Internet Archive is a non-profit digital library offering free universal access to books, movies &amp; music, as well as 436 billion archived web pages.</p>
<p><a href="https://archive.org/index.php" target="_blank">https://archive.org/index.php</a></p>
<p>The most comprehensive people search on the web. Pipl finds high-quality results in pages that cannot be found on regular search engines. Free People Search.</p>
<p><a href="https://pipl.com/" target="_blank">https://pipl.com/</a></p>
<p>Find people free with Zabasearch directory engine that includes free people search, reverse phone number lookup, address lookup, and more.</p>
<p><a href="http://www.zabasearch.com/" target="_blank">http://www.zabasearch.com/</a></p>
<p>TinEye is a reverse image search engine. Search by image: Give it an image and it will tell you where the image appears on the web.</p>
<p><a href="https://www.tineye.com/" target="_blank">https://www.tineye.com/</a></p>
<p>Find search engines from the UK, USA, and many other countries.</p>
<p><a href="http://www.searchenginecolossus.com/" target="_blank">http://www.searchenginecolossus.com/</a></p>
<p>Zuula is an innovative Internet search service that gives its users quick access to web, image, news blog and job search results from all the major search engines.With Zuula, users have the ability to get search results from their favorite search engine, such as Google or Yahoo!, but they also have one-click access to search results from a number of other search engines.</p>
<p><a href="http://zuula.com/" target="_blank">http://zuula.com/</a></p>
<p>Reverse IP Lookup &amp; Domain Check DNS Tool by myIPneighbors to find all domains hosted on an IP address by domain or IP address.</p>
<p><a href="http://www.myipneighbors.com/" target="_blank">http://www.myipneighbors.com/</a></p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/online-information-gathering-tools/">Online Information Gathering Tools</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/online-information-gathering-tools/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How to Secure Your PC</title>
		<link>https://www.armourinfosec.com/how-to-secure-your-pc/</link>
					<comments>https://www.armourinfosec.com/how-to-secure-your-pc/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Fri, 31 Jul 2015 04:12:51 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<category><![CDATA[Secure PC]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=293</guid>

					<description><![CDATA[<p>Operating System Security Operating System is the important program that runs in the computer. It performs basic tasks like recognizing...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/how-to-secure-your-pc/">How to Secure Your PC</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h4><strong><a href="https://www.armourinfosec.com/ethical-hacking/how-to-secure-your-pc/"><img decoding="async" class="alignright wp-image-859 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2015/07/Secure-your-PC.png" alt="Secure-your-PC" width="450" height="300" srcset="https://www.armourinfosec.com/wp-content/uploads/2015/07/Secure-your-PC.png 450w, https://www.armourinfosec.com/wp-content/uploads/2015/07/Secure-your-PC-300x200.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></a>Operating System Security</strong></h4>
<p style="text-align: justify;">Operating System is the important program that runs in the computer. It performs basic tasks like recognizing the input from the keyboard, controlling various files and directories in the hard disk and also various peripheral devices like printers, scanners etc&#8230;It will control the program in such a way that they do not mix &amp; merge with one another. It is responsible for securing the system by not allowing the unauthorized users to access the system.</p>
<p><strong>Need for securing the Operating System</strong></p>
<p style="text-align: justify;">The security of the operating system running on various PC’s, plays an important role in securing the network as a whole. Updating each computer system is mandatory for the efficient and effective working and for the security of systems in the network. Today we have a highly sophisticated operating system with lots of features, but it may be vulnerable if they are not administered, configured and monitored properly. Sometimes updating the operating system with latest patches may lead to interoperability issues with other operating systems. Hence proper care should be taken while updating the operating system.<span id="more-293"></span></p>
<p><strong>Securing the Operating System</strong></p>
<ol>
<li style="text-align: justify;"><strong>Update OS: </strong>It is important to install latest patches that are available for operating system. You need to update them regularly to prevent malware coming into your computer. Enable automatic updates for your OS or you can also update manually going to website like Microsoft and check for your OS updates which are available.</li>
</ol>
<ol style="text-align: justify;" start="2">
<li><strong>Install an antivirus product and keep up to date: </strong>Viruses, worms and other malware are some of the most prolific problems on the internet today. But the same time, there are some good antivirus applications that provide a great deals and more protection than just searching for viruses. However, any antivirus product is only good if you keep it up-to-date and scan your system regularly.</li>
</ol>
<ol style="text-align: justify;" start="3">
<li><strong>Enable Computer Firewall: </strong>Like antivirus products, Firewall products are designed to protect your system from Internet threats like hackers, viruses, and worms by filtering out any suspicious communications sent to your computer.</li>
</ol>
<ol start="4">
<li style="text-align: justify;"><strong>Use Strong Passwords: </strong>Passwords control access to files, programs, computers, hard drives and networks. They also deny access to unauthorized users. Poorly chosen passwords make it easier to break into your computer systems and expose to malicious attacks. In general, set up passwords and keep them secret never share it with others.</li>
</ol>
<h4><strong>Physical Security of PC</strong></h4>
<p style="text-align: justify;">The first step in security is considering the physical security of the PC. Maintenance of physical security depends on the location and the budget. The second step is the factors related to physical stability that include the power supply, physical location of the computer, room temperature, etc. Failure of anyone of the above said factors leads the computer into risks. There is a good chance that your home PC is one of the most expensive things in your home, or if you have got a laptop, it is likely to be the most expensive thing you carry in a bag. Although your insurance policy may cover the costs of replacing hardware if it’s stolen, there is nothing that money can do to retrieve precious or personal data. So physical security is as important as software security.</p>
<h4 style="text-align: justify;"><strong>Computer locks</strong></h4>
<p style="text-align: justify;">Nowadays PCs are available with a locking feature, which contains a socket in front of the case to unlock and lock the case. This helps us to prevent unauthorized users from gaining access to the hardware of the PC, and also it prevents them from booting the system with their own floppy or hardware.</p>
<h4 style="text-align: justify;"><strong>BIOS Security</strong></h4>
<p style="text-align: justify;">BIOS (Basic Input Output System) are built in software, which describes what a computer can do without accessing the programs on the disk. It contains a code which can control the keyboards, monitor, serial and parallel communications and some other functions. BIOS comes with a ROM chip in the computer which ensures that it will not be affected in case of disk failures. Setting BIOS password prevents the unauthorized users from rebooting and manipulating the system. This provides a low level of security as someone can disconnect the batteries and access the BIOS with manufacturer default passwords. However it takes some time for unauthorized users to open case and accessing BIOS, which leaves some traces of tampering.</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/how-to-secure-your-pc/">How to Secure Your PC</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/how-to-secure-your-pc/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Secure Your Passwords</title>
		<link>https://www.armourinfosec.com/secure-your-passwords/</link>
					<comments>https://www.armourinfosec.com/secure-your-passwords/#respond</comments>
		
		<dc:creator><![CDATA[Armour Infosec]]></dc:creator>
		<pubDate>Fri, 31 Jul 2015 03:42:34 +0000</pubDate>
				<category><![CDATA[Ethical Hacking]]></category>
		<guid isPermaLink="false">https://www.armourinfosec.com/?p=277</guid>

					<description><![CDATA[<p>Shoulder Surfing One way of stealing the password is standing behind an individual and over look their password while they...</p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/secure-your-passwords/">Secure Your Passwords</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></description>
										<content:encoded><![CDATA[<h4><strong><a href="https://www.armourinfosec.com/ethical-hacking/secure-your-passwords/"><img decoding="async" class="alignleft size-full wp-image-867" src="https://www.armourinfosec.com/wp-content/uploads/2015/07/strong-passwords.png" alt="strong passwords" width="450" height="300" srcset="https://www.armourinfosec.com/wp-content/uploads/2015/07/strong-passwords.png 450w, https://www.armourinfosec.com/wp-content/uploads/2015/07/strong-passwords-300x200.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></a>Shoulder Surfing</strong></h4>
<p style="text-align: justify;">One way of stealing the password is standing behind an individual and over look their password while they are typing it (Shoulder Surfing). Shoulder Surfing is a direct observation technique, such as looking over someone&#8217;s shoulder, to get passwords, PINs, other sensitive personal information and even listening while conversation if you give your credit-card number over the phone. Shoulder surfing is easily done in crowded places. It’s comparatively easy to stand next to someone and watch as they fill up a form, enter a PIN number at an ATM machine, or use a calling card at a public pay phone. It can also be done during long distance with the help of binoculars or other vision-enhancing devices. Your confidential information will be at risk if your passwords are observed by Shoulder Surfers. They can use your password information for logging into your account and they may do harm to your information.<span id="more-277"></span></p>
<p> <strong>How to prevent it?</strong></p>
<p style="text-align: justify;"><strong> </strong>Be aware of Shoulder Surfers at public places or schools while you are entering your passwords into the login accounts.</p>
<ul>
<li style="text-align: justify;">Do not reveal your passwords in front of others or type your usernames and passwords before any unauthorized persons.</li>
<li style="text-align: justify;">Cover the keyboard with paper or hand or something else so that it cannot b seen by any unauthorized person.</li>
</ul>
<p>&nbsp;</p>
<h4><strong>Brute force attacks</strong></h4>
<p style="text-align: justify;">Another way of stealing the password is through guess. Hackers try all the possible combinations with the help of personal information of an individual. They will try with the person&#8217;s name, pet name (nick name), numbers (date of birth, phone numbers), school name…etc. When there are large number of combinations of passwords the hackers uses fast processors and some software tools to crack the password. This method of cracking password is known as &#8220;Brute force attack&#8221;.</p>
<p>&nbsp;</p>
<h4><strong>Dictionary attacks</strong></h4>
<p style="text-align: justify;">Hackers also try with all possible dictionary words to crack your password with the help of some software tools. This is called a &#8220;Dictionary attack&#8221;.</p>
<p>&nbsp;</p>
<h4><strong>Sharing your passwords with strangers</strong></h4>
<p>Sharing the passwords with the unknown persons (strangers) may also lead to loss of your personal information. They can use your login information and can get the access to your information. The operating system does not know who is logging into the system, it will just allow any person who enters the credential information into the login page. The personslike strangers after getting access to your information they can do anything with it. They can copy, modify or delete it.</p>
<p>&nbsp;</p>
<h4><strong>Sharing your passwords with strangers</strong></h4>
<p style="text-align: justify;">Sharing the passwords with the unknown persons (strangers) may also lead to loss of your personal information. They can use your login information and can get the access to your information. The operating system does not know who is logging into the system, it will just allow any person who enters the credential information into the login page. The personslike strangers after getting access to your information they can do anything with it. They can copy, modify or delete it.</p>
<p>&nbsp;</p>
<h4><strong>Possible Vulnerabilities are</strong></h4>
<ul>
<li style="text-align: justify;">The passwords could be shared with other person and might get misused.</li>
<li style="text-align: justify;">The passwords can be forgotten.</li>
<li style="text-align: justify;">The Stolen passwords can be used by unauthorized user and may steel your personal information.</li>
</ul>
<p>&nbsp;</p>
<h4><strong>Good Password</strong></h4>
<ul>
<li style="text-align: justify;">Use at least 8 characters or more to create a password. The more number of characters we use, the more secure is our password.</li>
<li style="text-align: justify;">Use various combinations of characters while creating a password. For example, create a password consisting of a combination of lowercase, uppercase, numbers and special characters etc..</li>
<li style="text-align: justify;">Avoid using the words from dictionary. They can be cracked easily.</li>
<li style="text-align: justify;">Create a password such that it can be remembered. This avoids the need to write passwords somewhere, which is not advisable.</li>
<li style="text-align: justify;">A password must be difficult to guess.</li>
<li style="text-align: justify;">Change the password once in every 2 weeks or when you suspect someone knows the password.</li>
<li style="text-align: justify;">Do not use a password that was used earlier.</li>
<li style="text-align: justify;">Be careful while entering a password when someone is sitting beside you.</li>
<li style="text-align: justify;">Do not use the name of things located around you as passwords for your account.</li>
</ul>
<p>&nbsp;</p>
<h3 style="text-align: center;">Check your  strength of password online</h3>
<p><a href="https://howsecureismypassword.net/" target="_blank"><img decoding="async" class="aligncenter wp-image-288 size-full" src="https://www.armourinfosec.com/wp-content/uploads/2015/07/strength-of-password.png" alt="strength-of-password" width="200" height="100" /></a></p>
<p>The post <a rel="nofollow" href="https://www.armourinfosec.com/secure-your-passwords/">Secure Your Passwords</a> appeared first on <a rel="nofollow" href="https://www.armourinfosec.com/">Armour Infosec</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://www.armourinfosec.com/secure-your-passwords/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
